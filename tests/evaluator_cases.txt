# Evaluator test cases: one per line as "<expr> => <expected_string>"
# Blank lines and lines starting with # or // are ignored.

1 => 1
true => true
false => false
true || false => true
true && false => false
!false => true
false && false => false
false || false => false
true || !true => true

1 + 2 * 3 => 7
(1 + 2) * 3 => 9
10 / 2 => 5
10 % 3 => 1
2 ^ 3 => 8

[true][0] => true
[1, 2, 3][1] => 2
[1, 2, 3][0+1] => 2
{"a": 1, "b": 2}["a"] => 1
{"a": 1, "b": 2}["a"] => 1
{"ab": 1, "cd": 2}["a" + "b"] => 1

'x' + 'y' => xy

x => 10
truth || false => true
add(2, 3) => 5

"1" + "1" => 11
("1" + "2" + "3") + "4" => 1234

{"a" + "b": 1}["ab"] => 1

"abcd".length => 4
"abcd".toUpper() => ABCD
"abcd".substring(1) => bcd
"abcd".substring(0) => abcd
"abcd".substring(1,2) => b

["a", "b", "c"].join(",") => a,b,c
["a", "b", "c"].contains("b") => true
["a", "b", "c"].contains("d") => false
{"a": 1, "b": 2}.get("c", "blah") => blah
{"a": 1, "b": 2}.contains("a") => true
{"a": 1, "b": 2}.contains("c") => false

global.a => a
global.fun() => yes
global[0] => zero
global["k"] => v
