# Evaluator test cases: one per line as "<expr> => <expected_string>"
# Blank lines and lines starting with # or // are ignored.

1 => 1
true => true
false => false
true || false => true
true && false => false
!false => true
false && false => false
false || false => false
true || !true => true
!true => false
!false => true

-2 => -2
1 + 2 * 3 => 7
(1 + 2) * 3 => 9
10 / 2 => 5
10 % 3 => 1
2 ^ 3 => 8

"xy" => xy
'x' + 'y' => xy

# String escapes and weirdness
"\\" => \
"\"" => "
"'" => '
'\'' => '
'"' => "
"can't" => can't

x => 10
truth || false => true
add(2, 3) => 5

"1" + "1" => 11
("1" + "2" + "3") + "4" => 1234

"abcd".length => 4
"abcd".toUpper() => ABCD
"abcd".substring(1) => bcd
"abcd".substring(0) => abcd
"abcd".substring(1,2) => b

#### Lists
[true][0] => true
[1, 2, 3][1] => 2
[1, 2, 3][0+1] => 2

[1, 2, 3] == [1, 2, 3] => true
[1, 2, 3] == [1, 2, 4] => false
[1, 2, 3] != [1, 2, 4] => true
[1, 2, 3] != [1, 2, 3] => false

# Allow trailing commas
[1, 2, 3,] == [1, 2, 3] => true

[] && true => false
[1, 2, 3] && true => true

[].length => 0
[1, 2, 3].length => 3

["a", "b", "c"].contains("b") => true
["a", "b", "c"].contains("d") => false

[1, 2, 3].get(0, 7) => 1
[1, 2, 3].get(5, 7) => 7

["a", "b", "c"].join(",") => a,b,c

#### Dictionaries
{"a": 1, "b": 2}["a"] => 1
{"a": 1, "b": 2}["a"] => 1
{"ab": 1, "cd": 2}["a" + "b"] => 1

{"a" + "b": 1}["ab"] => 1

{"a": 1, "b": 2}.length => 2
{"a": 1, "b": 2}.keys().length => 2
{"a": 1, "b": 2}.keys()[0] => a
{"a": 1, "b": 2}.values().length => 2
{"a": 1, "b": 2}.values()[0] => 1
{"a": 1, "b": 2}.contains("a") => true
{"a": 1, "b": 2}.contains("c") => false
{"a": 1, "b": 2}.get("c", "blah") => blah

{"a": 1, "b": 2} == {"a": 1, "b": 2} => true
{"a": 1, "b": 2} == {"a": 1, "b": 3} => false
{"a": 1, "b": 2} != {"a": 1, "b": 2} => false
{"a": 1, "b": 2} != {"a": 1, "b": 3} => true

# Allow trailing commas
{"a": 1, "b": 2,} == {"a": 1, "b": 2} => true


#### Custom Objects
global.a => a
global.fun() => yes
global[0] => zero
global["k"] => v
